from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from core.config import settings
from core.decorators import with_services
from service.month import MonthService
from service.order import OrderService
from service.shift import ShiftService
from service.user import UserService
import matplotlib.pyplot as plt
import io
from telegram import InputFile


@with_services("user", "month", "shift")
async def begin_shift(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService,
    month_service: MonthService,
    shift_service: ShiftService,
) -> None:
    if not await month_service.get_active_month(telegram_id=update.message.chat.id):
        await update.message.reply_text(text='–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü"!')
        return

    if await shift_service.get_active_shift(telegram_id=update.message.chat.id):
        await update.message.reply_text(
            text="–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É."
        )
        return

    reply_markup = ReplyKeyboardMarkup(settings().keyboard_ratio, resize_keyboard=True)

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", reply_markup=reply_markup
    )


@with_services("user", "month", "shift")
async def end_shift(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService,
    month_service: MonthService,
    shift_service: ShiftService,
) -> None:
    text = await shift_service.end_shift(telegram_id=update.message.chat.id)

    await update.message.reply_text(text=text)


async def _set_ratio(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService,
    month_service: MonthService,
    shift_service: ShiftService,
    rate: int,
):
    month = await month_service.get_active_month(telegram_id=update.message.chat.id)

    if not month:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü"!')
        return

    if await shift_service.get_active_shift(telegram_id=update.message.chat.id):
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–º–µ–Ω—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É."
        )
        return

    await shift_service.begin_shift(
        telegram_id=update.message.chat.id, month_id=month.id, rate=rate
    )

    reply_markup = ReplyKeyboardMarkup(settings().keyboard_main, resize_keyboard=True)

    await update.message.reply_text("–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞!", reply_markup=reply_markup)


@with_services("user", "month", "shift")
async def set_ratio_5(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService,
    month_service: MonthService,
    shift_service: ShiftService,
):
    return await _set_ratio(
        update, context, user_service, month_service, shift_service, rate=5
    )


@with_services("user", "month", "shift")
async def set_ratio_10(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService,
    month_service: MonthService,
    shift_service: ShiftService,
):
    return await _set_ratio(
        update, context, user_service, month_service, shift_service, rate=10
    )


@with_services("user", "month", "shift", "order")
async def get_shift_stat(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService,
    month_service: MonthService,
    shift_service: ShiftService,
    order_service: OrderService,
) -> None:
    shift = await shift_service.get_active_shift(telegram_id=update.message.chat.id)

    if not shift:
        await update.message.reply_text("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞!")
        return

    orders_stats = await order_service.get_orders_stat_by_shift_id(shift_id=shift.id)

    start_time_str = shift.start_time.strftime("%d.%m.%Y %H:%M")

    salary = f"{orders_stats.total:,} √ó {shift.rate}% + 1000 = {orders_stats.total * (shift.rate / 100) + 1000:,.2f} —Ä—É–±."

    await update.message.reply_text(
        f"üìÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞: {start_time_str}\n"
        f"üí∏ –°—Ç–∞–≤–∫–∞: {shift.rate}%\n"
        f"üßæ –ó–∞–∫–∞–∑—ã: {orders_stats.count} —à—Ç. –Ω–∞ —Å—É–º–º—É {orders_stats.total:,} —Ä—É–±.\n\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}\n"
    )


@with_services("user", "month", "shift", "order")
async def plot_shift(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_service: UserService,
    month_service: MonthService,
    shift_service: ShiftService,
    order_service: OrderService,
) -> None:
    shift = await shift_service.get_active_shift(telegram_id=update.message.chat.id)

    if not shift:
        await update.message.reply_text("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞!")
        return

    orders = await order_service.get_orders_by_shift_id(shift_id=shift.id)

    if not orders:
        await update.message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    orders.sort(key=lambda o: o.created_at)

    times = [o.created_at.strftime("%H:%M") for o in orders]  # —Ç–æ–ª—å–∫–æ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
    totals = [o.amount for o in orders]
    cumulative_sum = [sum(totals[:i]) for i in range(1, len(totals) + 1)]

    fig1, ax1 = plt.subplots(figsize=(8, 5))
    ax1.plot(times, cumulative_sum, label="–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (‚ÇΩ)", marker="o", color="blue")
    ax1.set_xlabel("–í—Ä–µ–º—è (—á:–º)")
    ax1.set_ylabel("–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞ (‚ÇΩ)")
    ax1.set_title("üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–æ—Å—Ç–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤")
    ax1.legend()
    ax1.grid(True)

    buf1 = io.BytesIO()
    plt.tight_layout()
    fig1.savefig(buf1, format="png")
    buf1.seek(0)
    plt.close(fig1)

    fig2, ax2 = plt.subplots(figsize=(8, 5))
    bars = ax2.bar(range(1, len(totals) + 1), totals, color="orange")

    for i, bar in enumerate(bars):
        height = bar.get_height()
        ax2.text(
            bar.get_x() + bar.get_width() / 2,
            height + max(totals) * 0.02,
            f"{int(height):,}".replace(",", " "),
            ha="center",
            va="bottom",
            fontsize=9,
            fontweight="bold",
        )

    ax2.set_xlabel("‚Ññ –∑–∞–∫–∞–∑–∞")
    ax2.set_ylabel("–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (‚ÇΩ)")
    ax2.set_title("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É")
    ax2.grid(True, axis="y", linestyle="--", alpha=0.6)

    buf2 = io.BytesIO()
    plt.tight_layout()
    fig2.savefig(buf2, format="png")
    buf2.seek(0)
    plt.close(fig2)

    await update.message.reply_photo(photo=InputFile(buf1, filename="shift_growth.png"))
    await update.message.reply_photo(photo=InputFile(buf2, filename="shift_orders.png"))
