import logging
import matplotlib.pyplot as plt
import io
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

TOKEN: str = "1684742732:AAGZK2_5gx7HcuvgCOgJYFQTeytZu_MalXk"
# TOKEN = str = "8362502167:AAFzOIH8k-nionNZFXw8QIJv07pIEyJSLzo" # Diana

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_sessions = {}
user_monthly_data = {}
user_daily_stats = {}  # <-- —Ç—É—Ç –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º

keyboard_main = [
    ["–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü", "–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"],
    ["–¢–µ–∫—É—â–∏–π –∏—Ç–æ–≥", "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "–ü–æ—Å—á–∏—Ç–∞—Ç—å –∑/–ø"],
    ["üìâ –ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤", "üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"],
]

keyboard_ratio = [["–°—Ç–∞–≤–∫–∞ 5%", "–°—Ç–∞–≤–∫–∞ 10%"]]


# –ö–æ–º–∞–Ω–¥–∞ /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑ –∫–Ω–æ–ø–æ–∫
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –±—É–∫–µ—Ç–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–∞ –∑/–ø. –ù–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü", –∞ –∑–∞—Ç–µ–º "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É".',
        reply_markup=reply_markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü"
async def begin_month(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    # –û–±–Ω—É–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
    user_monthly_data[user_id] = {
        "shifts_count": 0,
        "shifts_total": 0,
        "bouquets_count": 0,
    }

    await update.message.reply_text(
        "‚úÖ –ù–æ–≤—ã–π –º–µ—Å—è—Ü –Ω–∞—á–∞—Ç! –í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω—É–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–º–µ–Ω—ã."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"
async def begin_shift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id

    if user_id not in user_monthly_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü"!')
        return

    # –ü–æ–∫–∞ –Ω–µ –∑–∞–¥–∞–µ–º —Å—Ç–∞–≤–∫—É, —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–º–µ–Ω—É
    user_sessions[user_id] = {"count": 0, "total": 0, "is_active": True, "rate": None}

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç–∞–≤–∫–∏

    reply_markup = ReplyKeyboardMarkup(keyboard_ratio, resize_keyboard=True)

    await update.message.reply_text(
        "–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞:", reply_markup=reply_markup
    )


async def set_rate_5(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in user_sessions or not user_sessions[user_id]["is_active"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É.")
        return
    user_sessions[user_id]["rate"] = 0.05
    reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
    await update.message.reply_text(
        "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ 5%. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—É–º–º—ã –±—É–∫–µ—Ç–æ–≤.",
        reply_markup=reply_markup,
    )


async def set_rate_10(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in user_sessions or not user_sessions[user_id]["is_active"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É.")
        return
    user_sessions[user_id]["rate"] = 0.10
    reply_markup = ReplyKeyboardMarkup(keyboard_main, resize_keyboard=True)
    await update.message.reply_text(
        "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ 10%. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—É–º–º—ã –±—É–∫–µ—Ç–æ–≤.",
        reply_markup=reply_markup,
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∏–π –∏—Ç–æ–≥" (–∑–∞ —Å–º–µ–Ω—É)
async def current_total(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    session_data = user_sessions.get(user_id)

    if not session_data or not session_data["is_active"]:
        await update.message.reply_text('–°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É".')
        return

    count = session_data["count"]
    total = session_data["total"]
    await update.message.reply_text(
        f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: {count} –±—É–∫–µ—Ç(–∞/–æ–≤) –Ω–∞ —Å—É–º–º—É {total:,} —Ä—É–±.".replace(
            ",", " "
        )
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
async def current_month(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    monthly_data = user_monthly_data.get(user_id)

    if not monthly_data:
        await update.message.reply_text('–ú–µ—Å—è—Ü –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç. –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü".')
        return

    shifts_count = monthly_data["shifts_count"]
    shifts_total = monthly_data["shifts_total"]
    bouquets_count = monthly_data["bouquets_count"]

    await update.message.reply_text(
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –º–µ—Å—è—Ü:\n"
        f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–º–µ–Ω: {shifts_count}\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–µ—Ç–æ–≤: {bouquets_count}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞: {shifts_total:,} —Ä—É–±.".replace(",", " ")
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"
async def end_shift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    session_data = user_sessions.get(user_id)
    monthly_data = user_monthly_data.get(user_id)

    if not monthly_data:
        await update.message.reply_text('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü"!')
        return
    if not session_data or not session_data["is_active"]:
        await update.message.reply_text("–°–º–µ–Ω–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return
    if not session_data["rate"]:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É (5% –∏–ª–∏ 10%).")
        return

    count = session_data["count"]
    total = session_data["total"]
    rate = session_data["rate"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Å—è—á–Ω—ã–µ –∏—Ç–æ–≥–∏
    monthly_data["shifts_count"] += 1
    monthly_data["shifts_total"] += total
    monthly_data["bouquets_count"] += count

    # –î–æ–±–∞–≤–∏–º –µ—â–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∑–∞ —Å–º–µ–Ω—ã
    if "salary_total" not in monthly_data:
        monthly_data["salary_total"] = 0
    salary_for_shift = (total * rate) + 1000
    monthly_data["salary_total"] += salary_for_shift

    session_data["is_active"] = False

    await update.message.reply_text(
        f"‚úÖ –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞!\n"
        f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {count} –±—É–∫–µ—Ç(–∞/–æ–≤) –Ω–∞ —Å—É–º–º—É {total:,} —Ä—É–±.\n"
        f"–°—Ç–∞–≤–∫–∞: {int(rate * 100)}%\n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É: {salary_for_shift:,.0f} —Ä—É–±.\n"
        f"üìå –†–∞—Å—á–µ—Ç: {total:,} √ó {int(rate * 100)}% + 1000 = {salary_for_shift:,.0f} —Ä—É–±.".replace(
            ",", " "
        )
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—Å—á–∏—Ç–∞—Ç—å –∑/–ø"
async def calculate_salary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    monthly_data = user_monthly_data.get(user_id)

    if not monthly_data or monthly_data["shifts_count"] == 0:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü.")
        return

    shifts_count = monthly_data["shifts_count"]
    bouquets_count = monthly_data["bouquets_count"]
    shifts_total = monthly_data["shifts_total"]
    salary_total = monthly_data.get("salary_total", 0)

    await update.message.reply_text(
        f"üí∞ –ò—Ç–æ–≥–∏ –∑–∞ –º–µ—Å—è—Ü:\n"
        f"–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–º–µ–Ω: {shifts_count}\n"
        f"–ë—É–∫–µ—Ç–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {bouquets_count}\n"
        f"–ü—Ä–æ–¥–∞–∂–∏: {shifts_total:,} —Ä—É–±.\n"
        f"-------------------------\n"
        f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_total:,.0f} —Ä—É–±.".replace(",", " ")
    )


# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º
async def plot_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    stats = user_daily_stats.get(user_id)

    if not stats:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ üìâ")
        return

    days = list(stats.keys())
    orders = [stats[day]["count"] for day in days]
    totals = [stats[day]["total"] for day in days]

    # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(6, 4))
    plt.plot(days, orders, marker="o", label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤")
    plt.plot(days, totals, marker="s", label="–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (—Ä—É–±.)")
    plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –¥–Ω—è–º")
    plt.xlabel("–î–µ–Ω—å")
    plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏–µ")
    plt.legend()
    plt.grid(True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    await update.message.reply_photo(photo=buf)


# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä: –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
async def plot_avg_price(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    import datetime

    user_id = update.effective_user.id
    stats = user_daily_stats.get(user_id)

    if not stats:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üìä")
        return

    week_stats = {}
    for day, data in stats.items():
        weekday = datetime.datetime.strptime(day, "%Y-%m-%d").strftime(
            "%A"
        )  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫ –∏ —Ç.–¥.
        if weekday not in week_stats:
            week_stats[weekday] = {"count": 0, "total": 0}
        week_stats[weekday]["count"] += data["count"]
        week_stats[weekday]["total"] += data["total"]

    days = list(week_stats.keys())
    avg_prices = [
        week_stats[d]["total"] / week_stats[d]["count"]
        if week_stats[d]["count"] > 0
        else 0
        for d in days
    ]

    plt.figure(figsize=(6, 4))
    plt.bar(days, avg_prices, color="skyblue")
    plt.title("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏")
    plt.ylabel("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ (—Ä—É–±.)")
    plt.xticks(rotation=45)

    buf = io.BytesIO()
    plt.savefig(buf, format="png")
    buf.seek(0)
    plt.close()

    await update.message.reply_photo(photo=buf)


# –û–±–Ω–æ–≤–∏–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±—É–∫–µ—Ç–æ–≤, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
async def handle_bouquet_price(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> None:
    import datetime

    user_id = update.effective_user.id
    session_data = user_sessions.get(user_id)

    if not session_data or not session_data["is_active"]:
        return

    try:
        price = int(update.message.text)
        if price <= 0:
            return
    except ValueError:
        return

    session_data["count"] += 1
    session_data["total"] += price

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–Ω—è–º
    today = datetime.date.today().strftime("%Y-%m-%d")
    if user_id not in user_daily_stats:
        user_daily_stats[user_id] = {}
    if today not in user_daily_stats[user_id]:
        user_daily_stats[user_id][today] = {"count": 0, "total": 0}
    user_daily_stats[user_id][today]["count"] += 1
    user_daily_stats[user_id][today]["total"] += price


def main() -> None:
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Text("–ù–∞—á–∞—Ç—å –º–µ—Å—è—Ü"), begin_month))
    application.add_handler(MessageHandler(filters.Text("–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"), begin_shift))
    application.add_handler(MessageHandler(filters.Text("–¢–µ–∫—É—â–∏–π –∏—Ç–æ–≥"), current_total))
    application.add_handler(
        MessageHandler(filters.Text("–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"), current_month)
    )
    application.add_handler(MessageHandler(filters.Text("–ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"), end_shift))
    application.add_handler(
        MessageHandler(filters.Text("–ü–æ—Å—á–∏—Ç–∞—Ç—å –∑/–ø"), calculate_salary)
    )
    application.add_handler(
        MessageHandler(filters.Text("üìâ –ì—Ä–∞—Ñ–∏–∫ –∑–∞–∫–∞–∑–æ–≤"), plot_orders)
    )
    application.add_handler(
        MessageHandler(filters.Text("üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏"), plot_avg_price)
    )
    application.add_handler(MessageHandler(filters.Text("–°—Ç–∞–≤–∫–∞ 5%"), set_rate_5))
    application.add_handler(MessageHandler(filters.Text("–°—Ç–∞–≤–∫–∞ 10%"), set_rate_10))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bouquet_price)
    )

    application.run_polling()


if __name__ == "__main__":
    main()
